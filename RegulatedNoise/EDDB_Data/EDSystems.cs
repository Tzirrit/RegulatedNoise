// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace RegulatedNoise.EDDB_Data
{

    public class EDSystem
    {

        [JsonProperty("id")]
        public int Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("x")]
        public double X { get; set; }

        [JsonProperty("y")]
        public double Y { get; set; }

        [JsonProperty("z")]
        public double Z { get; set; }

        private string m_Faction;
        [JsonProperty("faction")]
        public string Faction { get{return m_Faction;} set{m_Faction = value; if(m_Faction == null) m_Faction = string.Empty;} }

        private long? m_Population;
        [JsonProperty("population")]
        public long? Population { get{return m_Population;} set{m_Population = value; if(m_Population == null) m_Population = -1;} }

        private string m_Government;
        [JsonProperty("government")]
        public string Government { get{return m_Government;} set{m_Government = value; if(m_Government == null) m_Government = string.Empty;} }

        private string m_Allegiance;
        [JsonProperty("allegiance")]
        public string Allegiance { get{return m_Allegiance;} set{m_Allegiance = value; if(m_Allegiance == null) m_Allegiance = string.Empty;} }

        private string m_State;
        [JsonProperty("state")]
        public string State { get{return m_State;} set{m_State = value; if(m_State == null) m_State = string.Empty;} }

        private string m_Security;
        [JsonProperty("security")]
        public string Security { get{return m_Security;} set{m_Security = value; if(m_Security == null) m_Security = string.Empty;} }

        private string m_PrimaryEconomy;
        [JsonProperty("primary_economy")]
        public string PrimaryEconomy { get{return m_PrimaryEconomy;} set{m_PrimaryEconomy = value; if(m_PrimaryEconomy == null) m_PrimaryEconomy = string.Empty;} }

        private int? m_NeedsPermit;
        [JsonProperty("needs_permit")]
        public int? NeedsPermit { get{return m_NeedsPermit;} set{m_NeedsPermit = value; if(m_NeedsPermit == null) m_NeedsPermit = -1;} }

        [JsonProperty("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
         /// creates a new system
        /// </summary>
        public EDSystem()
        {
            clear();
        }

        /// <summary>
         /// creates a new system as a copy of another system
         /// only the id must declared extra
        /// </summary>
        /// <param name="newSystemIndex"></param>
        /// <param name="ownSystem"></param>
        public EDSystem(int newId, EDSystem sourceSystem)
        {
            clear();
            Id              = newId;
            getValues(sourceSystem);   
        }

        /// <summary>
        /// true, if all data *except the ID* is equal (case insensitive)
        /// </summary>
        /// <param name="eqSystem"></param>
        /// <returns></returns>
        public bool EqualsED(EDSystem eqSystem)
        {
            bool retValue = false;

            if ((Name.Equals(eqSystem.Name, StringComparison.InvariantCultureIgnoreCase)) && 
                (X.Equals(eqSystem.X)) && 
                (Y.Equals(eqSystem.Y)) && 
                (Z.Equals(eqSystem.Z)) && 
                (Faction.Equals(eqSystem.Faction, StringComparison.InvariantCultureIgnoreCase)) && 
                (Population.Equals(eqSystem.Population)) && 
                (Government.Equals(eqSystem.Government, StringComparison.InvariantCultureIgnoreCase)) && 
                (Allegiance.Equals(eqSystem.Allegiance, StringComparison.InvariantCultureIgnoreCase)) && 
                (State.Equals(eqSystem.State, StringComparison.InvariantCultureIgnoreCase)) && 
                (Security.Equals(eqSystem.Security, StringComparison.InvariantCultureIgnoreCase)) && 
                (PrimaryEconomy.Equals(eqSystem.PrimaryEconomy, StringComparison.InvariantCultureIgnoreCase)) && 
                (NeedsPermit.Equals(eqSystem.NeedsPermit)) && 
                (UpdatedAt.Equals(eqSystem.UpdatedAt)))
                    retValue = true;

            return retValue;             
        }

        /// <summary>
        /// copy the values from another system exept for the ID
        /// </summary>
        /// <param name="ValueStation"></param>
        public void getValues(EDSystem ownSystem, bool getAll=false)
        {
            if(getAll)
                Id = ownSystem.Id;

            Name            = ownSystem.Name;
            X               = ownSystem.X;
            Y               = ownSystem.Y;
            Z               = ownSystem.Z;
            Faction         = ownSystem.Faction;
            Population      = ownSystem.Population;
            Government      = ownSystem.Government;
            Allegiance      = ownSystem.Allegiance;
            State           = ownSystem.State;
            Security        = ownSystem.Security;
            PrimaryEconomy  = ownSystem.PrimaryEconomy;
            NeedsPermit     = ownSystem.NeedsPermit;
            UpdatedAt       = ownSystem.UpdatedAt;
        }

        /// <summary>
        /// reset all data 
        /// </summary>
        public void clear()
        { 
            Id              = 0;
            Name            = string.Empty;
            X               = 0.0;
            Y               = 0.0;
            Z               = 0.0;
            Faction         = string.Empty;
            Population      = 0;
            Government      = string.Empty;
            Allegiance      = string.Empty;
            State           = string.Empty;
            Security        = string.Empty;
            PrimaryEconomy  = string.Empty;
            NeedsPermit     = 0;
            UpdatedAt       = 0;

        }
    }

}
